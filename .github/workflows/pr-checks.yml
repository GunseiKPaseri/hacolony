name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

concurrency:
  group: pr-checks-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Skip checks if PR is in draft
  check-draft:
    name: 📝 Check if PR is Draft
    runs-on: ubuntu-latest
    outputs:
      is-draft: ${{ steps.check.outputs.is-draft }}
    steps:
      - name: Check if PR is draft
        id: check
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "is-draft=true" >> $GITHUB_OUTPUT
            echo "🚧 PR is in draft mode, skipping some checks"
          else
            echo "is-draft=false" >> $GITHUB_OUTPUT
            echo "✅ PR is ready for review"
          fi

  # Quick validation (runs for all PRs including drafts)
  quick-validation:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Type check
        run: npm run check

      - name: Lint check
        run: npm run lint

  # Full checks (only for non-draft PRs)
  full-checks:
    name: 🔍 Full PR Checks
    runs-on: ubuntu-latest
    needs: [check-draft, quick-validation]
    if: needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better diff analysis
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Build application
        run: npm run build

      - name: Check for test coverage
        run: |
          if [ -f "coverage/lcov.info" ]; then
            echo "✅ Test coverage report generated"
          else
            echo "⚠️ No test coverage report found"
          fi

  # Security checks for PRs
  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Check for sensitive information
        run: |
          # Check for common sensitive patterns
          if grep -r -E "(password|secret|token|key).*=" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/ || true; then
            echo "⚠️ Potential sensitive information found in code"
            echo "Please review and ensure no secrets are hardcoded"
          fi

  # Changed files analysis
  changed-files-analysis:
    name: 📂 Changed Files Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          # Get changed files compared to main branch
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Count changes by type
          TS_FILES=$(echo "$CHANGED_FILES" | grep -E "\.(ts|tsx)$" | wc -l)
          TEST_FILES=$(echo "$CHANGED_FILES" | grep "\.test\." | wc -l)
          CONFIG_FILES=$(echo "$CHANGED_FILES" | grep -E "(package\.json|tsconfig|\.config\.|\.yml|\.yaml)" | wc -l)

          echo "TypeScript files changed: $TS_FILES"
          echo "Test files changed: $TEST_FILES"
          echo "Config files changed: $CONFIG_FILES"

          # Generate summary
          echo "## 📂 Changed Files Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript/React | $TS_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Files | $TEST_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| Config Files | $CONFIG_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changed Files:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # PR size check
  pr-size-check:
    name: 📏 PR Size Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        run: |
          git fetch origin main
          ADDITIONS=$(git diff --shortstat origin/main...HEAD | grep -o '[0-9]\+ insertion' | grep -o '[0-9]\+' || echo "0")
          DELETIONS=$(git diff --shortstat origin/main...HEAD | grep -o '[0-9]\+ deletion' | grep -o '[0-9]\+' || echo "0")
          FILES_CHANGED=$(git diff --name-only origin/main...HEAD | wc -l)

          echo "Files changed: $FILES_CHANGED"
          echo "Lines added: $ADDITIONS"
          echo "Lines deleted: $DELETIONS"

          # Determine PR size
          TOTAL_CHANGES=$((ADDITIONS + DELETIONS))
          if [ $TOTAL_CHANGES -gt 1000 ]; then
            SIZE="🔴 Extra Large"
            echo "⚠️ This is a very large PR. Consider breaking it down into smaller PRs."
          elif [ $TOTAL_CHANGES -gt 500 ]; then
            SIZE="🟠 Large"
            echo "⚠️ This is a large PR. Please ensure it's well tested."
          elif [ $TOTAL_CHANGES -gt 100 ]; then
            SIZE="🟡 Medium"
            echo "✅ Medium-sized PR."
          else
            SIZE="🟢 Small"
            echo "✅ Small PR - easy to review!"
          fi

          echo "## 📏 PR Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Size:** $SIZE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Files Changed | $FILES_CHANGED |" >> $GITHUB_STEP_SUMMARY
          echo "| Lines Added | $ADDITIONS |" >> $GITHUB_STEP_SUMMARY
          echo "| Lines Deleted | $DELETIONS |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Changes | $TOTAL_CHANGES |" >> $GITHUB_STEP_SUMMARY

  # Final PR check summary
  pr-summary:
    name: 📋 PR Check Summary
    runs-on: ubuntu-latest
    needs: [check-draft, quick-validation, full-checks, security-check]
    if: always()
    steps:
      - name: Generate PR summary
        run: |
          echo "## 🔍 Pull Request Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.check-draft.outputs.is-draft }}" = "true" ]; then
            echo "🚧 **Status:** Draft PR - Limited checks performed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Quick Validation | ${{ needs.quick-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Status:** Ready for Review - Full checks performed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Quick Validation | ${{ needs.quick-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Full Checks | ${{ needs.full-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Security Check | ${{ needs.security-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.quick-validation.result }}" == "success" && 
                ("${{ needs.check-draft.outputs.is-draft }}" == "true" || 
                 ("${{ needs.full-checks.result }}" == "success" && 
                  "${{ needs.security-check.result }}" == "success")) ]]; then
            echo "🎉 **All checks passed!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed.** Please review the failed checks above." >> $GITHUB_STEP_SUMMARY
          fi
