// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../generated/client"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db/dev.db"
}

model User {
  id       String @id @default(cuid(2))
  name     String
  email    String @unique
  password String

  ownAvatars   Avatar[] @relation("UserOwnsAvatars")
  selfAvatar   Avatar?  @relation("UserSelfAvatar", fields: [selfAvatarId], references: [id])
  selfAvatarId String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Avatar {
  id          String  @id @default(cuid(2))
  name        String
  description String?
  imageUrl    String?
  hidden      Boolean

  owner    User   @relation("UserOwnsAvatars", fields: [ownerId], references: [id])
  ownerId  String
  selfUser User?  @relation("UserSelfAvatar")

  followers Follow[] @relation("AvatarFollowers")
  followees Follow[] @relation("AvatarFollowees")

  posts Post[] @relation("AvatarPosts")

  botConfig BotConfig?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  BotTaskQueue BotTaskQueue[]
  LlmTaskQueue LlmTaskQueue[]
  PostQueue    PostQueue[]
}

model BotConfig {
  id     String @id @default(cuid(2))
  prompt String

  avatar   Avatar @relation(fields: [avatarId], references: [id])
  avatarId String @unique
}

enum QueueState {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model BotTaskQueue {
  id           String         @id @default(cuid(2))
  /// [TaskContext]
  task         Json
  avatar       Avatar         @relation(fields: [avatarId], references: [id])
  avatarId     String
  status       QueueState     @default(PENDING)
  priority     Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  LlmTaskQueue LlmTaskQueue[]
  PostQueue    PostQueue[]
}

model LlmTaskQueue {
  id             String        @id @default(cuid(2))
  prompt         String
  /// [LLMContext]
  context        Json?
  avatar         Avatar        @relation(fields: [avatarId], references: [id])
  avatarId       String
  botTaskQueue   BotTaskQueue? @relation(fields: [botTaskQueueId], references: [id])
  botTaskQueueId String?
  status         QueueState    @default(PENDING)
  priority       Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model PostQueue {
  id             String        @id @default(cuid(2))
  content        String
  /// [PostQueueContext]
  context        Json?
  avatar         Avatar        @relation(fields: [avatarId], references: [id])
  avatarId       String
  scheduledAt    DateTime
  status         QueueState    @default(PENDING)
  replyTo        Post?         @relation("PostRepliesQueue", fields: [replyToId], references: [id])
  replyToId      String?
  botTaskQueueId String?
  botTaskQueue   BotTaskQueue? @relation(fields: [botTaskQueueId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Post {
  id      String @id @default(cuid(2))
  content String

  postedBy   Avatar @relation("AvatarPosts", fields: [postedById], references: [id])
  postedById String

  replyTo   Post?   @relation("PostReplies", fields: [replyToId], references: [id])
  replyToId String?
  replies   Post[]  @relation("PostReplies")

  quotedPost   Post?   @relation("PostQuotes", fields: [quotedPostId], references: [id])
  quotedPostId String?
  quotes       Post[]  @relation("PostQuotes")

  replyPostQueue PostQueue[] @relation("PostRepliesQueue")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id String @id @default(cuid(2))

  follower   Avatar @relation("AvatarFollowees", fields: [followerId], references: [id])
  followerId String
  followee   Avatar @relation("AvatarFollowers", fields: [followeeId], references: [id])
  followeeId String

  createdAt DateTime @default(now())

  @@unique([followerId, followeeId])
}
